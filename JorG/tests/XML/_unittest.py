from vasprun import VaspRunXML
import unittest
from itertools import product

class TestVaspRunXml(unittest.TestCase):
    names = {'m_s' : 0,'m_p' : 1,'m_d' : 2,'m_f' : 3,'m_total': 4}
    def load(self,name):
        self.parser = VaspRunXML("tests/XML/%s/vasprun.xml"%name)
        self.parser()

    def test_Cr(self):
        self.load('Cr')
        result = {1: [0.012302570000000011, 0.003045449999999995, 1.00912277, 0.0, 1.0244707900000003],
                  2: [-0.01229774000000001, -0.003045449999999995, -1.00912277, 0.0, -1.0244659600000001]}
        self.assertEqual(len(self.parser),len(result))
        self.assertAlmostEqual(self.parser.fermi_energy,7.5086678)
        self.assertAlmostEqual(self.parser.energy,-19.00403092)
        for key,name in product(result,self.names):
            self.assertAlmostEqual(self.parser[key][self.names[name]],result[key][self.names[name]])

    def test_CsF3Ni(self):
        result = {1: [6.930000000000572e-05, 9.390999999998677e-05, 0.0, 0.0, 0.00016320999999999366],
                  2: [1.0000000005971487e-08, 9.352999999998063e-05, 0.0, 0.0, 9.353999999998686e-05],
                  3: [-1.1220000000048753e-05, -7.070000000003727e-05, 0.0, 0.0, -8.19200000000904e-05],
                  4: [0.004042739999997484, 0.10081142000000025, 0.0, 0.0, 0.10485415999999773],
                  5: [0.004100509999997471, 0.10069569000000017, 0.0, 0.0, 0.10479619999999773],
                  6: [1.1859999999974072e-05, 0.00018465999999996618, 0.0, 0.0, 0.00019651999999993825],
                  7: [-1.1520000000007527e-05, 4.625000000001581e-05, 0.0, 0.0, 3.473000000000851e-05],
                  8: [4.620999999999898e-05, 0.00010522999999997983, 0.0, 0.0, 0.00015143999999997794],
                  9: [1.1859999999975617e-05, 4.625000000000537e-05, 0.0, 0.0, 5.810999999997224e-05],
                  10: [0.00410053999999751, 0.10054569000000019, 0.0, 0.0, 0.1046462299999977],
                  11: [4.621999999999745e-05, 0.00017357000000001207, 0.0, 0.0, 0.00021979000000001004],
                  12: [-1.1539999999999981e-05, 0.0001396900000000354, 0.0, 0.0, 0.00012815000000003496],
                  13: [0.004088909999997555, 0.10069628000000022, 0.0, 0.0, 0.10478518999999782],
                  14: [3.491999999998273e-05, 0.00010251999999997311, 0.0, 0.0, 0.00013743999999995995],
                  15: [-4.618000000000765e-05, 9.253999999996303e-05, 0.0, 0.0, 4.6359999999955205e-05],
                  16: [0.004075559999997518, 0.10078743000000022, 0.0, 0.0, 0.10486298999999769],
                  17: [0.004087069999997505, 0.10066091000000023, 0.0, 0.0, 0.10474797999999774],
                  18: [9.999999986320322e-09, 6.950999999997665e-05, 0.0, 0.0, 6.951999999996276e-05],
                  19: [2.3419999999965105e-05, 1.071999999998783e-05, 0.0, 0.0, 3.413999999995457e-05],
                  20: [0.004100469999997516, 0.10062682000000016, 0.0, 0.0, 0.10472728999999777],
                  21: [1.1549999999993958e-05, 0.00012839000000000906, 0.0, 0.0, 0.0001399400000000025],
                  22: [0.004075639999997467, 0.10072978000000019, 0.0, 0.0, 0.10480541999999773],
                  23: [0.004112169999997469, 0.10067229000000018, 0.0, 0.0, 0.10478445999999768],
                  24: [8.11199999999668e-05, 5.780999999998703e-05, 0.0, 0.0, 0.00013892999999995414],
                  25: [5.7769999999989616e-05, 0.00010559999999997085, 0.0, 0.0, 0.00016336999999995918],
                  26: [-3.4660000000005547e-05, 0.00015164000000000694, 0.0, 0.0, 0.00011698000000000117],
                  27: [0.004110459999997561, 0.10072737000000018, 0.0, 0.0, 0.10483782999999774],
                  28: [0.004042719999997552, 0.10068398000000017, 0.0, 0.0, 0.1047266999999978],
                  29: [0.004054209999997518, 0.10067296000000021, 0.0, 0.0, 0.1047271699999978],
                  30: [0.004133459999997573, 0.10071596000000022, 0.0, 0.0, 0.10484941999999785],
                  31: [3.46300000000327e-05, 6.974000000004358e-05, 0.0, 0.0, 0.00010437000000007547],
                  32: [3.4700000000000064e-05, 8.127999999999372e-05, 0.0, 0.0, 0.00011597999999999412],
                  33: [0.004145149999997499, 0.10065812000000023, 0.0, 0.0, 0.10480326999999777],
                  34: [0.004088879999997505, 0.10064997000000019, 0.0, 0.0, 0.10473884999999773],
                  35: [5.7779999999986535e-05, -1.1140000000017827e-05, 0.0, 0.0, 4.6639999999968627e-05],
                  36: [-4.620000000000194e-05, 2.3409999999992757e-05, 0.0, 0.0, -2.2790000000009362e-05],
                  37: [0.004054229999997515, 0.1005452400000002, 0.0, 0.0, 0.1045994699999978],
                  38: [0.004121939999997498, 0.10066947000000015, 0.0, 0.0, 0.10479140999999768],
                  39: [-1.1559999999978991e-05, 0.00011787999999998515, 0.0, 0.0, 0.00010632000000000705],
                  40: [-0.004063859999997477, -0.10042742000000021, 0.0, 0.0, -0.10449127999999779],
                  41: [-0.004087009999997478, -0.10053236000000026, 0.0, 0.0, -0.1046193699999977],
                  42: [-1.155000000000661e-05, 6.952999999998449e-05, 0.0, 0.0, 5.797999999997743e-05],
                  43: [0.004133559999997498, 0.10068224000000023, 0.0, 0.0, 0.10481579999999772],
                  44: [0.004077289999997503, 0.10062662000000028, 0.0, 0.0, 0.10470390999999783],
                  45: [-3.46399999999718e-05, 6.94900000000198e-05, 0.0, 0.0, 3.485000000004876e-05],
                  46: [-0.004063989999997469, -0.10060183000000021, 0.0, 0.0, -0.1046658199999977],
                  47: [0.004112059999997541, 0.10070839000000024, 0.0, 0.0, 0.10482044999999772],
                  48: [0.004122009999997495, 0.10064640000000018, 0.0, 0.0, 0.10476840999999769],
                  49: [0.000130739999999953, -0.0013499100000000214, 1.6437740400000003, 0.0, 1.6425548700000003],
                  50: [0.001180449999999968, 0.00016183999999997846, 1.6451433199999999, 0.0, 1.6464856099999998],
                  51: [0.00228757, 0.0017544599999999766, 1.6464235, 0.0, 1.6504655299999997],
                  52: [-0.001273599999999966, -0.00013848999999999554, -1.6446258500000002, 0.0, -1.6460379399999998],
                  53: [0.0001769099999999607, -0.001268970000000019, 1.6439358800000001, 0.0, 1.64284382],
                  54: [-0.0023222299999999907, -0.001731189999999988, -1.6462544500000003, 0.0, -1.6503078700000005],
                  55: [-0.002241309999999999, -0.0016850899999999794, -1.6464547399999998, 0.0, -1.65038114],
                  56: [0.0012966899999999606, 0.00023100999999998946, 1.64476796, 0.0, 1.64629566],
                  57: [0.0001653299999999575, -0.001372920000000024, 1.6438087599999995, 0.0, 1.6426011699999996],
                  58: [0.0012035099999999715, 0.00016191999999998048, 1.6450622700000002, 0.0, 1.6464277],
                  59: [0.002264430000000002, 0.0018468999999999758, 1.6465848699999999, 0.0, 1.6506961999999998],
                  60: [0.0012504999999999652, 0.00019633999999998805, 1.6448139700000002, 0.0, 1.6462608100000002],
                  61: [8.456999999995919e-05, -0.0013382700000000207, 1.6436126000000002, 0.0, 1.6423588999999996],
                  62: [9.679999999995335e-05, -0.0013617900000000133, 1.6435823699999996, 0.0, 1.6423173799999995],
                  63: [-0.002310609999999993, -0.0017312499999999806, -1.6463736000000002, 0.0, -1.6504154599999998],
                  64: [-0.0012389099999999694, -0.0001268499999999918, -1.64474112, 0.0, -1.6461068800000003],
                  65: [2.2270000000034886e-05, 0.00034626000000003565, 9.246000000000029e-05, 0.0, 0.0004609900000000696],
                  66: [1.0500000000038148e-05, 0.0008571400000000191, 0.00031183000000000035, 0.0, 0.0011794700000000537],
                  67: [-3.4839999999981845e-05, 1.0009999999985588e-05, -0.00015005999999999977, 0.0, -0.00017488999999999515],
                  68: [-4.6579999999974865e-05, -2.524000000001265e-05, -0.00010386999999999993, 0.0, -0.00017568999999998931],
                  69: [4.555999999998856e-05, 0.0004847000000000309, 5.7800000000000294e-05, 0.0, 0.0005880600000000194],
                  70: [0.00016121000000004874, 0.00041606999999999755, 0.0001385900000000001, 0.0, 0.0007158700000000459],
                  71: [-1.0499999999651684e-06, 0.0008100400000000629, 0.0003002800000000004, 0.0, 0.001109270000000102],
                  72: [0.00016058000000008214, 0.0007406900000000706, 0.0003118500000000004, 0.0, 0.0012131200000001531],
                  73: [0.00013749000000009109, 0.0008908400000000989, 0.0003348700000000005, 0.0, 0.0013632000000001877],
                  74: [-4.698999999995774e-05, 0.00048390000000002076, 0.0001270500000000002, 0.0, 0.000563960000000063],
                  75: [0.00010346999999998743, 0.00026603999999998536, 0.00017320999999999998, 0.0, 0.0005427199999999726],
                  76: [0.00018389000000000719, 0.0007992900000000373, 0.0003926600000000002, 0.0, 0.001375840000000043],
                  77: [2.245999999999062e-05, 0.0005549300000000206, 3.47100000000002e-05, 0.0, 0.0006121000000000133],
                  78: [-3.4829999999946444e-05, 7.939000000002434e-05, -0.0001731599999999997, 0.0, -0.00012859999999992127],
                  79: [-1.2339999999930794e-05, 0.0004040399999999625, 0.00015015000000000007, 0.0, 0.0005418500000000366],
                  80: [1.0750000000015657e-05, 0.0003809099999999784, 0.0001270600000000002, 0.0, 0.0005187199999999937]}
        self.load('CsF3Ni')
        self.assertEqual(len(self.parser),len(result))
        self.assertAlmostEqual(self.parser.fermi_energy, 1.091042)
        self.assertAlmostEqual(self.parser.energy,  -365.98572836)
        for key,name in product(result,self.names):
            self.assertAlmostEqual(self.parser[key][self.names[name]],result[key][self.names[name]])

    def test_Fe(self):
        result = {1: [0.013952960000000004, 0.05503402999999993, -2.2577089299999993, 0.0, -2.1887219399999993],
                  2: [0.013952960000000004, 0.05503402999999993, -2.2577089299999993, 0.0, -2.1887219399999993]}
        self.load('Fe')
        self.assertEqual(len(self.parser),len(result))
        self.assertAlmostEqual(self.parser.fermi_energy, 5.8588345)
        self.assertAlmostEqual(self.parser.energy,       -16.486549)
        for key,name in product(result,self.names):
            self.assertAlmostEqual(self.parser[key][self.names[name]],result[key][self.names[name]])

    def test_Fe54(self):
        result = {1: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  2: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  3: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  4: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  5: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  6: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  7: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  8: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  9: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  10: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  11: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  12: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  13: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  14: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  15: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  16: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  17: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  18: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  19: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  20: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  21: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  22: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  23: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  24: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  25: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  26: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  27: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  28: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  29: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  30: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  31: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  32: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  33: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  34: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  35: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  36: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  37: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  38: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  39: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  40: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  41: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  42: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  43: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  44: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  45: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  46: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  47: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  48: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  49: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  50: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  51: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  52: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  53: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005],
                  54: [-0.01546789999999991, -0.059168299999999834, 2.2329456300000006, 0.0, 2.1583094300000005]}
        self.load('Fe54')
        self.assertEqual(len(self.parser),len(result))
        self.assertAlmostEqual(self.parser.fermi_energy, 5.84841144)
        self.assertAlmostEqual(self.parser.energy,       -445.02425357)
        for key,name in product(result,self.names):
            self.assertAlmostEqual(self.parser[key][self.names[name]],result[key][self.names[name]])

    def test_Fe54a(self):
        result = {1: [-0.01073693999999998, -0.045655269999999935, 2.3920235000000005, 0.0, 2.3356312900000002],
                  2: [-0.01091393999999997, -0.04849954999999998, 2.3090844600000002, 0.0, 2.2496709700000004],
                  3: [-0.03488815000000001, -0.08095681999999998, -2.03387535, 0.0, -2.14972032],
                  4: [-0.008466120000000014, -0.04309918000000002, 2.2604503900000004, 0.0, 2.2088850900000003],
                  5: [-0.005580059999999991, -0.036441929999999984, 2.26131465, 0.0, 2.21929266],
                  6: [-0.013838719999999992, -0.05062633999999996, 2.3656790600000006, 0.0, 2.3012140000000003],
                  7: [-0.012548429999999978, -0.053966419999999946, 2.4586814100000005, 0.0, 2.3921665600000006],
                  8: [-0.00695022, -0.04400243000000001, 2.27347826, 0.0, 2.22252561],
                  9: [-0.00904992000000001, -0.04510892999999998, 2.35187308, 0.0, 2.2977142300000004],
                  10: [-0.005244510000000015, -0.031013119999999977, 2.18056399, 0.0, 2.1443063600000003],
                  11: [-0.010496639999999988, -0.05114209999999999, 2.39001262, 0.0, 2.3283738800000005],
                  12: [-0.003575669999999989, -0.03937823999999998, 2.1587384199999997, 0.0, 2.11578451],
                  13: [-0.010051109999999995, -0.041045340000000013, 2.324830740000001, 0.0, 2.2737342900000006],
                  14: [-0.003877720000000008, -0.03554447000000001, 2.1187506800000007, 0.0, 2.0793284900000004],
                  15: [-0.004285950000000004, -0.02355130000000001, 2.1685365, 0.0, 2.14069925],
                  16: [0.0003602299999999961, -0.013152189999999965, 2.0749732400000003, 0.0, 2.0621812800000003],
                  17: [-0.0036738700000000096, -0.021239079999999973, 2.1954994100000005, 0.0, 2.1705864600000004],
                  18: [-0.0036102400000000215, -0.035800349999999995, 2.14804846, 0.0, 2.10863787],
                  19: [-0.00959100999999999, -0.04646407999999998, 2.3295255000000004, 0.0, 2.2734704100000003],
                  20: [-0.011776349999999998, -0.0485295, 2.3262782900000003, 0.0, 2.2659724400000005],
                  21: [-0.004709359999999996, -0.03415274, 2.265640200000001, 0.0, 2.2267781],
                  22: [-0.00847942999999999, -0.030496949999999995, 2.24171243, 0.0, 2.2027360500000004],
                  23: [-0.004176840000000015, -0.03283641999999998, 2.27405578, 0.0, 2.2370425200000006],
                  24: [-0.011842709999999985, -0.048140039999999995, 2.34114762, 0.0, 2.28116487],
                  25: [-0.011052099999999988, -0.04693861999999997, 2.356505490000001, 0.0, 2.2985147700000006],
                  26: [-0.002867959999999989, -0.029241149999999994, 2.0419520600000007, 0.0, 2.009842950000001],
                  27: [-0.006035379999999979, -0.04268878999999999, 2.3382003400000007, 0.0, 2.2894761700000004],
                  28: [-0.02531910999999999, -0.04861662999999998, -2.01417221, 0.0, -2.0881079500000004],
                  29: [-0.005786540000000014, -0.03598773999999999, 2.256665220000001, 0.0, 2.2148909400000005],
                  30: [0.0007292199999999992, -0.020372909999999973, 1.9732402300000005, 0.0, 1.9535965400000006],
                  31: [-0.039057499999999995, -0.07786082999999998, -2.217849259999999, 0.0, -2.3347675899999993],
                  32: [-0.0017919099999999868, -0.025297839999999974, 2.0380397800000005, 0.0, 2.0109500300000005],
                  33: [-0.0008325599999999787, -0.006320089999999987, 2.0951251000000006, 0.0, 2.0879724499999996],
                  34: [-0.023083849999999972, -0.03634251999999998, -1.9915875699999999, 0.0, -2.0510139400000003],
                  35: [-0.02902301, -0.050843689999999976, -2.03843415, 0.0, -2.11830085],
                  36: [0.001822540000000001, -0.016658589999999963, 1.9556347300000003, 0.0, 1.9407986800000003],
                  37: [-0.009347020000000011, -0.047687119999999986, 2.40018154, 0.0, 2.3431474000000003],
                  38: [-0.010078050000000012, -0.04668719000000002, 2.2777152600000004, 0.0, 2.2209500200000005],
                  39: [-0.0006333099999999946, -0.018847229999999965, 2.12554381, 0.0, 2.1060632700000004],
                  40: [-0.006987560000000004, -0.034368869999999996, 2.2736616400000007, 0.0, 2.2323052100000007],
                  41: [-0.0008621700000000024, -0.025089969999999975, 2.1915641200000002, 0.0, 2.1656119800000004],
                  42: [-0.012549729999999995, -0.05299625000000001, 2.37172677, 0.0, 2.3061807900000004],
                  43: [-0.010116210000000014, -0.05147330999999998, 2.3762928500000005, 0.0, 2.3147033300000004],
                  44: [-0.007482659999999995, -0.041803949999999965, 2.22605535, 0.0, 2.1767687400000004],
                  45: [-0.004723960000000006, -0.03702698999999997, 2.260159780000001, 0.0, 2.218408830000001],
                  46: [-0.0007566600000000027, -0.013870969999999977, 2.0906479, 0.0, 2.0760202700000003],
                  47: [-0.004262410000000001, -0.03682172999999995, 2.2219791400000006, 0.0, 2.1808950000000005],
                  48: [-0.007336289999999995, -0.04155388999999996, 2.23368515, 0.0, 2.1847949700000004],
                  49: [-0.007715699999999999, -0.024674949999999946, 2.19462285, 0.0, 2.1622322],
                  50: [-0.002530210000000012, -0.02634051, 2.0957554800000007, 0.0, 2.06688476],
                  51: [-0.02515467999999997, -0.04807324999999998, -2.1396908900000002, 0.0, -2.21291882],
                  52: [-0.02464263, -0.04768243, -1.9329065300000003, 0.0, -2.0052315900000006],
                  53: [-0.023626939999999985, -0.041230709999999976, -2.0723214199999993, 0.0, -2.1371790699999993],
                  54: [-0.005308579999999993, -0.03137659, 2.1940596000000006, 0.0, 2.157374430000001]}
        self.load('Fe54a')
        self.assertEqual(len(self.parser),len(result))
        self.assertAlmostEqual(self.parser.fermi_energy, 6.02319395)
        self.assertAlmostEqual(self.parser.energy,       -440.63557742)
        for key,name in product(result,self.names):
            self.assertAlmostEqual(self.parser[key][self.names[name]],result[key][self.names[name]])

    def test_H(self):
        result = {1: [8.019000000000095e-05, 0.0, 0.0, 0.0, 8.019000000000099e-05],
                  2: [8.019000000000095e-05, 0.0, 0.0, 0.0, 8.019000000000099e-05],
                  3: [8.019000000000095e-05, 0.0, 0.0, 0.0, 8.019000000000099e-05],
                  4: [8.019000000000095e-05, 0.0, 0.0, 0.0, 8.019000000000099e-05],
                  5: [8.019000000000095e-05, 0.0, 0.0, 0.0, 8.019000000000099e-05],
                  6: [8.019000000000095e-05, 0.0, 0.0, 0.0, 8.019000000000099e-05],
                  7: [8.019000000000095e-05, 0.0, 0.0, 0.0, 8.019000000000099e-05],
                  8: [8.019000000000095e-05, 0.0, 0.0, 0.0, 8.019000000000099e-05]}
        self.load('H')
        self.assertEqual(len(self.parser),len(result))
        self.assertAlmostEqual(self.parser.fermi_energy, 2.56307049)
        self.assertAlmostEqual(self.parser.energy,       -20.826651)
        for key,name in product(result,self.names):
            self.assertAlmostEqual(self.parser[key][self.names[name]],result[key][self.names[name]])

    def test_Nd(self):
        result = {1: [0.020107940000002114, -0.024302940000001327, 0.45673558000000014, 3.2899869300000013, 3.7425275100000013],
                  2: [0.020107940000002114, -0.024302940000001327, 0.45673558000000014, 3.2899869300000013, 3.7425275100000013],
                  3: [0.006230310000000461, -0.020340290000000705, 0.30146863000000007, 3.2353690500000023, 3.522727700000002],
                  4: [0.006230310000000461, -0.020340290000000705, 0.30146863000000007, 3.2353690500000023, 3.522727700000002]}
        self.load('Nd')
        self.assertEqual(len(self.parser),len(result))
        self.assertAlmostEqual(self.parser.fermi_energy, 6.02113888)
        self.assertAlmostEqual(self.parser.energy,       -29.90086079)
        for key,name in product(result,self.names):
            self.assertAlmostEqual(self.parser[key][self.names[name]],result[key][self.names[name]])

if __name__ == '__main__':
    unittest.main()

