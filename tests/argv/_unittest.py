import unittest
import numpy as np
import re
from JorG.argv import options
from JorG.Masks import MaskTemplate

class TestArgv(unittest.TestCase):
    def test_input_001(self):
        INPUT="foo --incar INCAR --input POSCAR -N 3 -E Fe"
        self.currentOptions = options(*INPUT.split())
        self.assertIsInstance(self.currentOptions('neighbor'),int)
        self.assertGreater(self.currentOptions('neighbor'),0)
        self.assertEqual(self.currentOptions('neighbor'),3)
        self.assertIsInstance(self.currentOptions('input'),str)
        self.assertEqual(self.currentOptions('input'),'POSCAR')
        self.assertIsInstance(self.currentOptions('incar'),str)
        self.assertEqual(self.currentOptions('incar'),'INCAR')
        self.assertIsNone(self.currentOptions('output'),str)
        self.assertIsInstance(self.currentOptions('Wyckoffs'),str)
        self.assertIsInstance(self.currentOptions('mask'),str)
        self.assertIn("Fe",self.currentOptions('mask'))
        self.assertIsInstance(self.currentOptions('reference'),int)
        self.assertIsInstance(self.currentOptions('symmetry'),bool)
        self.assertIsInstance(self.currentOptions('redundant'),bool)
        self.assertIsInstance(self.currentOptions('refined'),bool)

    def test_input_002(self):
        INPUT="foo --incar INCAR --input POSCAR -N 13 -E Ni"
        self.currentOptions = options(*INPUT.split())
        self.assertIsInstance(self.currentOptions('neighbor'),int)
        self.assertGreater(self.currentOptions('neighbor'),0)
        self.assertEqual(self.currentOptions('neighbor'),13)
        self.assertIsInstance(self.currentOptions('input'),str)
        self.assertEqual(self.currentOptions('input'),'POSCAR')
        self.assertIsInstance(self.currentOptions('incar'),str)
        self.assertEqual(self.currentOptions('incar'),'INCAR')
        self.assertIsNone(self.currentOptions('output'),str)
        self.assertIsInstance(self.currentOptions('Wyckoffs'),str)
        self.assertIsInstance(self.currentOptions('mask'),str)
        self.assertIn("Ni",self.currentOptions('mask'))
        self.assertIsInstance(self.currentOptions('reference'),int)
        self.assertIsInstance(self.currentOptions('symmetry'),bool)
        self.assertIsInstance(self.currentOptions('redundant'),bool)
        self.assertIsInstance(self.currentOptions('refined'),bool)

    def test_input_003(self):
        INPUT="foo --incar INCAR --input POSCAR -N 3 -E Ni"
        self.currentOptions = options(*INPUT.split())
        self.assertIsInstance(self.currentOptions('neighbor'),int)
        self.assertGreater(self.currentOptions('neighbor'),0)
        self.assertEqual(self.currentOptions('neighbor'),3)
        self.assertIsInstance(self.currentOptions('input'),str)
        self.assertEqual(self.currentOptions('input'),'POSCAR')
        self.assertIsInstance(self.currentOptions('incar'),str)
        self.assertEqual(self.currentOptions('incar'),'INCAR')
        self.assertIsNone(self.currentOptions('output'),str)
        self.assertIsInstance(self.currentOptions('Wyckoffs'),str)
        self.assertIsInstance(self.currentOptions('mask'),str)
        self.assertIn("Ni",self.currentOptions('mask'))
        self.assertIsInstance(self.currentOptions('reference'),int)
        self.assertGreater(self.currentOptions('neighbor'),0)
        self.assertIsInstance(self.currentOptions('symmetry'),bool)
        self.assertIsInstance(self.currentOptions('redundant'),bool)
        self.assertIsInstance(self.currentOptions('refined'),bool)

    def test_input_004(self):
        INPUT="foo --incar INCAR_tst1 --input POSCAR_tst1 -N 3 -E Fe"
        self.currentOptions = options(*INPUT.split())
        self.assertIsInstance(self.currentOptions('neighbor'),int)
        self.assertGreater(self.currentOptions('neighbor'),0)
        self.assertEqual(self.currentOptions('neighbor'),3)
        self.assertIsInstance(self.currentOptions('input'),str)
        self.assertEqual(self.currentOptions('input'),'POSCAR_tst1')
        self.assertIsInstance(self.currentOptions('incar'),str)
        self.assertEqual(self.currentOptions('incar'),'INCAR_tst1')
        self.assertIsNone(self.currentOptions('output'),str)
        self.assertIsInstance(self.currentOptions('Wyckoffs'),str)
        self.assertIsInstance(self.currentOptions('mask'),str)
        self.assertIn("Fe",self.currentOptions('mask'))
        self.assertIsInstance(self.currentOptions('reference'),int)
        self.assertGreater(self.currentOptions('neighbor'),0)
        self.assertIsInstance(self.currentOptions('symmetry'),bool)
        self.assertIsInstance(self.currentOptions('redundant'),bool)
        self.assertIsInstance(self.currentOptions('refined'),bool)

    def test_input_005(self):
        INPUT="foo --symmetry -i POSCAR_Cs2F6Ni2 "
        self.currentOptions = options(*INPUT.split())
        self.assertIsNone(self.currentOptions('neighbor'))
        self.assertIsInstance(self.currentOptions('input'),str)
        self.assertEqual(self.currentOptions('input'),'POSCAR_Cs2F6Ni2')
        self.assertIsInstance(self.currentOptions('incar'),str)
        self.assertIsNone(self.currentOptions('output'),str)
        self.assertIsInstance(self.currentOptions('Wyckoffs'),str)
        self.assertIsInstance(self.currentOptions('mask'),MaskTemplate)
        self.assertIsInstance(self.currentOptions('reference'),int)
        self.assertIsInstance(self.currentOptions('symmetry'),bool)
        self.assertEqual(self.currentOptions('symmetry'),True)
        self.assertIsInstance(self.currentOptions('redundant'),bool)
        self.assertIsInstance(self.currentOptions('refined'),bool)

    def test_input_006(self):
        INPUT="foo -i POSCAR_tst1 "
        self.currentOptions = options(*INPUT.split())
        self.assertIsNone(self.currentOptions('neighbor'))
        self.assertIsInstance(self.currentOptions('input'),str)
        self.assertEqual(self.currentOptions('input'),'POSCAR_tst1')
        self.assertIsInstance(self.currentOptions('incar'),str)
        self.assertEqual(self.currentOptions('incar'),'INCAR')
        self.assertIsNone(self.currentOptions('output'),str)
        self.assertIsInstance(self.currentOptions('Wyckoffs'),str)
        self.assertIsInstance(self.currentOptions('mask'),MaskTemplate)
        self.assertIn("Mn",self.currentOptions('mask'))
        self.assertIsInstance(self.currentOptions('reference'),int)
        self.assertIsInstance(self.currentOptions('symmetry'),bool)
        self.assertIsInstance(self.currentOptions('redundant'),bool)
        self.assertIsInstance(self.currentOptions('refined'),bool)

    def test_input_007(self):
        INPUT="foo --incar INCAR_tst1 --input POSCAR_tst1 -N 2 -E Fe1"
        self.currentOptions = options(*INPUT.split())
        self.assertIsInstance(self.currentOptions('neighbor'),int)
        self.assertGreater(self.currentOptions('neighbor'),0)
        self.assertEqual(self.currentOptions('neighbor'),2)
        self.assertIsInstance(self.currentOptions('input'),str)
        self.assertEqual(self.currentOptions('input'),'POSCAR_tst1')
        self.assertIsInstance(self.currentOptions('incar'),str)
        self.assertEqual(self.currentOptions('incar'),'INCAR_tst1')
        self.assertIsNone(self.currentOptions('output'),str)
        self.assertIsInstance(self.currentOptions('Wyckoffs'),str)
        self.assertIsInstance(self.currentOptions('mask'),str)
        self.assertIn("Fe",self.currentOptions('mask'))
        self.assertIsInstance(self.currentOptions('reference'),int)
        self.assertIsInstance(self.currentOptions('symmetry'),bool)
        self.assertIsInstance(self.currentOptions('redundant'),bool)
        self.assertIsInstance(self.currentOptions('refined'),bool)

    def test_input_008(self):
        INPUT="foo --incar _INCARs/INCAR_tst1 --input _POSCARs/POSCAR_tst1 -N 1 -E Fe1"
        self.currentOptions = options(*INPUT.split())
        self.assertIsInstance(self.currentOptions('neighbor'),int)
        self.assertGreater(self.currentOptions('neighbor'),0)
        self.assertEqual(self.currentOptions('neighbor'),1)
        self.assertIsInstance(self.currentOptions('input'),str)
        self.assertEqual(self.currentOptions('input'),'_POSCARs/POSCAR_tst1')
        self.assertIsInstance(self.currentOptions('incar'),str)
        self.assertEqual(self.currentOptions('incar'),'_INCARs/INCAR_tst1')
        self.assertIsNone(self.currentOptions('output'),str)
        self.assertIsInstance(self.currentOptions('Wyckoffs'),str)
        self.assertIsInstance(self.currentOptions('mask'),str)
        self.assertIn("Fe",self.currentOptions('mask'))
        self.assertIsInstance(self.currentOptions('reference'),int)
        self.assertIsInstance(self.currentOptions('symmetry'),bool)
        self.assertIsInstance(self.currentOptions('redundant'),bool)
        self.assertIsInstance(self.currentOptions('refined'),bool)

    def test_input_009(self):
        INPUT="foo --incar _INCARs/INCAR_CsNiF --input _POSCARs/POSCAR_CsNiF -N 1 -E Ni -o output/J1"
        self.currentOptions = options(*INPUT.split())
        self.assertIsInstance(self.currentOptions('neighbor'),int)
        self.assertGreater(self.currentOptions('neighbor'),0)
        self.assertEqual(self.currentOptions('neighbor'),1)
        self.assertIsInstance(self.currentOptions('input'),str)
        self.assertEqual(self.currentOptions('input'),'_POSCARs/POSCAR_CsNiF')
        self.assertIsInstance(self.currentOptions('incar'),str)
        self.assertEqual(self.currentOptions('incar'),'_INCARs/INCAR_CsNiF')
        self.assertIsInstance(self.currentOptions('output'),str)
        self.assertEqual(self.currentOptions('output'),'output/J1')
        self.assertIsInstance(self.currentOptions('Wyckoffs'),str)
        self.assertIsInstance(self.currentOptions('mask'),str)
        self.assertIn("Ni",self.currentOptions('mask'))
        self.assertIsInstance(self.currentOptions('reference'),int)
        self.assertIsInstance(self.currentOptions('symmetry'),bool)
        self.assertIsInstance(self.currentOptions('redundant'),bool)
        self.assertIsInstance(self.currentOptions('refined'),bool)

    def test_input_010(self):
        INPUT="foo --symmetry -i _POSCARs/POSCAR_CsNiF -I _INCARs/INCAR_CsNiF "
        self.currentOptions = options(*INPUT.split())
        self.assertIsNone(self.currentOptions('neighbor'))
        self.assertIsInstance(self.currentOptions('input'),str)
        self.assertEqual(self.currentOptions('input'),'_POSCARs/POSCAR_CsNiF')
        self.assertIsInstance(self.currentOptions('incar'),str)
        self.assertEqual(self.currentOptions('incar'),'_INCARs/INCAR_CsNiF')
        self.assertIsNone(self.currentOptions('output'),str)
        self.assertIsInstance(self.currentOptions('Wyckoffs'),str)
        self.assertIsInstance(self.currentOptions('mask'),MaskTemplate)
        self.assertIn("Fe",self.currentOptions('mask'))
        self.assertIsInstance(self.currentOptions('reference'),int)
        self.assertIsInstance(self.currentOptions('symmetry'),bool)
        self.assertEqual(self.currentOptions('symmetry'),True)
        self.assertIsInstance(self.currentOptions('redundant'),bool)
        self.assertIsInstance(self.currentOptions('refined'),bool)

    def test_input_011(self):
        INPUT="foo -i _POSCARs/POSCAR_CsNiF -I _INCARs/INCAR_CsNiF -N 6 -E Ni -o output/ASD --redundant"
        self.currentOptions = options(*INPUT.split())
        self.assertIsInstance(self.currentOptions('neighbor'),int)
        self.assertGreater(self.currentOptions('neighbor'),0)
        self.assertEqual(self.currentOptions('neighbor'),6)
        self.assertIsInstance(self.currentOptions('input'),str)
        self.assertEqual(self.currentOptions('input'),'_POSCARs/POSCAR_CsNiF')
        self.assertIsInstance(self.currentOptions('incar'),str)
        self.assertEqual(self.currentOptions('incar'),'_INCARs/INCAR_CsNiF')
        self.assertIsInstance(self.currentOptions('output'),str)
        self.assertEqual(self.currentOptions('output'),'output/ASD')
        self.assertIsInstance(self.currentOptions('Wyckoffs'),str)
        self.assertIsInstance(self.currentOptions('mask'),str)
        self.assertIn("Ni",self.currentOptions('mask'))
        self.assertIsInstance(self.currentOptions('reference'),int)
        self.assertIsInstance(self.currentOptions('symmetry'),bool)
        self.assertIsInstance(self.currentOptions('redundant'),bool)
        self.assertEqual(self.currentOptions('redundant'),True)
        self.assertIsInstance(self.currentOptions('refined'),bool)

    def test_input_012(self):
        INPUT="foo -i _POSCARs/POSCAR_CsNiF -I _INCARs/INCAR_CsNiF -N 2 -E Ni -o output/ASD "
        self.currentOptions = options(*INPUT.split())
        self.assertIsInstance(self.currentOptions('neighbor'),int)
        self.assertGreater(self.currentOptions('neighbor'),0)
        self.assertEqual(self.currentOptions('neighbor'),2)
        self.assertIsInstance(self.currentOptions('input'),str)
        self.assertEqual(self.currentOptions('input'),'_POSCARs/POSCAR_CsNiF')
        self.assertIsInstance(self.currentOptions('incar'),str)
        self.assertEqual(self.currentOptions('incar'),'_INCARs/INCAR_CsNiF')
        self.assertIsInstance(self.currentOptions('output'),str)
        self.assertEqual(self.currentOptions('output'),'output/ASD')
        self.assertIsInstance(self.currentOptions('Wyckoffs'),str)
        self.assertIsInstance(self.currentOptions('mask'),str)
        self.assertIn("Ni",self.currentOptions('mask'))
        self.assertIsInstance(self.currentOptions('reference'),int)
        self.assertIsInstance(self.currentOptions('symmetry'),bool)
        self.assertIsInstance(self.currentOptions('redundant'),bool)
        self.assertIsInstance(self.currentOptions('refined'),bool)

    def test_input_013(self):
        INPUT="foo -i _POSCARs/POSCAR_CsNiF -I _INCARs/INCAR_CsNiF -N 2 -E Ni -o output/ASD --reference 21"
        self.currentOptions = options(*INPUT.split())
        self.assertIsInstance(self.currentOptions('neighbor'),int)
        self.assertGreater(self.currentOptions('neighbor'),0)
        self.assertEqual(self.currentOptions('neighbor'),2)
        self.assertIsInstance(self.currentOptions('input'),str)
        self.assertEqual(self.currentOptions('input'),'_POSCARs/POSCAR_CsNiF')
        self.assertIsInstance(self.currentOptions('incar'),str)
        self.assertEqual(self.currentOptions('incar'),'_INCARs/INCAR_CsNiF')
        self.assertIsInstance(self.currentOptions('output'),str)
        self.assertEqual(self.currentOptions('output'),'output/ASD')
        self.assertIsInstance(self.currentOptions('Wyckoffs'),str)
        self.assertIsInstance(self.currentOptions('mask'),str)
        self.assertIn("Ni",self.currentOptions('mask'))
        self.assertIsInstance(self.currentOptions('reference'),int)
        self.assertEqual(self.currentOptions('reference'),21-1)
        self.assertIsInstance(self.currentOptions('symmetry'),bool)
        self.assertIsInstance(self.currentOptions('redundant'),bool)
        self.assertIsInstance(self.currentOptions('refined'),bool)

    def test_input_014(self):
        INPUT="foo -i _POSCARs/POSCAR_CsNiF -I _INCARs/INCAR_CsNiF -E Ni -o output/ASD -R 123.0"
        self.currentOptions = options(*INPUT.split())
        self.assertIsNone(self.currentOptions('neighbor'),int)
        self.assertIsInstance(self.currentOptions('cutOff'),float)
        self.assertAlmostEqual(self.currentOptions('cutOff'),123.0)
        self.assertIsInstance(self.currentOptions('input'),str)
        self.assertEqual(self.currentOptions('input'),'_POSCARs/POSCAR_CsNiF')
        self.assertIsInstance(self.currentOptions('incar'),str)
        self.assertEqual(self.currentOptions('incar'),'_INCARs/INCAR_CsNiF')
        self.assertIsInstance(self.currentOptions('output'),str)
        self.assertEqual(self.currentOptions('output'),'output/ASD')
        self.assertIsInstance(self.currentOptions('Wyckoffs'),str)
        self.assertIsInstance(self.currentOptions('mask'),str)
        self.assertIn("Ni",self.currentOptions('mask'))
        self.assertIsInstance(self.currentOptions('reference'),int)
        self.assertIsInstance(self.currentOptions('symmetry'),bool)
        self.assertIsInstance(self.currentOptions('redundant'),bool)
        self.assertIsInstance(self.currentOptions('refined'),bool)

    def test_input_015(self):
        INPUT="foo -i _POSCARs/POSCAR_CsNiF -I _INCARs/INCAR_CsNiF -N 2 -E Ni -o output/ASD --refined"
        self.currentOptions = options(*INPUT.split())
        self.assertIsInstance(self.currentOptions('neighbor'),int)
        self.assertGreater(self.currentOptions('neighbor'),0)
        self.assertEqual(self.currentOptions('neighbor'),2)
        self.assertIsInstance(self.currentOptions('input'),str)
        self.assertEqual(self.currentOptions('input'),'_POSCARs/POSCAR_CsNiF')
        self.assertIsInstance(self.currentOptions('incar'),str)
        self.assertEqual(self.currentOptions('incar'),'_INCARs/INCAR_CsNiF')
        self.assertIsInstance(self.currentOptions('output'),str)
        self.assertEqual(self.currentOptions('output'),'output/ASD')
        self.assertIsInstance(self.currentOptions('Wyckoffs'),str)
        self.assertIsInstance(self.currentOptions('mask'),str)
        self.assertIn("Ni",self.currentOptions('mask'))
        self.assertIsInstance(self.currentOptions('reference'),int)
        self.assertIsInstance(self.currentOptions('symmetry'),bool)
        self.assertIsInstance(self.currentOptions('redundant'),bool)
        self.assertIsInstance(self.currentOptions('refined'),bool)
        self.assertEqual(self.currentOptions('refined'),True)

    def test_input_016(self):
        INPUT="foo -i _POSCARs/POSCAR_CsNiF -I _INCARs/INCAR_CsNiF -N 2 -E Ni -o output/ASD  --period 3d 5p"
        self.currentOptions = options(*INPUT.split())
        self.assertIsInstance(self.currentOptions('neighbor'),int)
        self.assertGreater(self.currentOptions('neighbor'),0)
        self.assertEqual(self.currentOptions('neighbor'),2)
        self.assertIsInstance(self.currentOptions('input'),str)
        self.assertEqual(self.currentOptions('input'),'_POSCARs/POSCAR_CsNiF')
        self.assertIsInstance(self.currentOptions('incar'),str)
        self.assertEqual(self.currentOptions('incar'),'_INCARs/INCAR_CsNiF')
        self.assertIsInstance(self.currentOptions('output'),str)
        self.assertEqual(self.currentOptions('output'),'output/ASD')
        self.assertIsInstance(self.currentOptions('Wyckoffs'),str)
        self.assertIsInstance(self.currentOptions('mask'),str)
        self.assertIn("Ni",self.currentOptions('mask'))
        self.assertIn("Ti",self.currentOptions('mask'))
        self.assertIn("Mn",self.currentOptions('mask'))
        self.assertIn("Te",self.currentOptions('mask'))
        self.assertIn("In",self.currentOptions('mask'))
        self.assertIsInstance(self.currentOptions('reference'),int)
        self.assertIsInstance(self.currentOptions('symmetry'),bool)
        self.assertIsInstance(self.currentOptions('redundant'),bool)
        self.assertIsInstance(self.currentOptions('refined'),bool)

    def test_input_017(self):
        INPUT="foo -i _POSCARs/POSCAR_CsNiF -I _INCARs/INCAR_CsNiF -N 2 -E Ni -o output/ASD  --block D"
        self.currentOptions = options(*INPUT.split())
        self.assertIsInstance(self.currentOptions('neighbor'),int)
        self.assertGreater(self.currentOptions('neighbor'),0)
        self.assertEqual(self.currentOptions('neighbor'),2)
        self.assertIsInstance(self.currentOptions('input'),str)
        self.assertEqual(self.currentOptions('input'),'_POSCARs/POSCAR_CsNiF')
        self.assertIsInstance(self.currentOptions('incar'),str)
        self.assertEqual(self.currentOptions('incar'),'_INCARs/INCAR_CsNiF')
        self.assertIsInstance(self.currentOptions('output'),str)
        self.assertEqual(self.currentOptions('output'),'output/ASD')
        self.assertIsInstance(self.currentOptions('Wyckoffs'),str)
        self.assertIsInstance(self.currentOptions('mask'),str)
        self.assertIn("Ni",self.currentOptions('mask'))
        self.assertIn("Fe",self.currentOptions('mask'))
        self.assertIn("Au",self.currentOptions('mask'))
        self.assertIn("Hg",self.currentOptions('mask'))
        self.assertIn("Cr",self.currentOptions('mask'))
        self.assertIn("Hf",self.currentOptions('mask'))
        self.assertIsInstance(self.currentOptions('reference'),int)
        self.assertIsInstance(self.currentOptions('symmetry'),bool)
        self.assertIsInstance(self.currentOptions('redundant'),bool)
        self.assertIsInstance(self.currentOptions('refined'),bool)

    def test_input_018(self):
        INPUT="foo -i _POSCARs/POSCAR_CsNiF -I _INCARs/INCAR_CsNiF -N 2 -E Ni -o output/ASD  --group 2 5"
        self.currentOptions = options(*INPUT.split())
        self.assertIsInstance(self.currentOptions('neighbor'),int)
        self.assertGreater(self.currentOptions('neighbor'),0)
        self.assertEqual(self.currentOptions('neighbor'),2)
        self.assertIsInstance(self.currentOptions('input'),str)
        self.assertEqual(self.currentOptions('input'),'_POSCARs/POSCAR_CsNiF')
        self.assertIsInstance(self.currentOptions('incar'),str)
        self.assertEqual(self.currentOptions('incar'),'_INCARs/INCAR_CsNiF')
        self.assertIsInstance(self.currentOptions('output'),str)
        self.assertEqual(self.currentOptions('output'),'output/ASD')
        self.assertIsInstance(self.currentOptions('Wyckoffs'),str)
        self.assertIsInstance(self.currentOptions('mask'),str)
        self.assertIn("Ni",self.currentOptions('mask'))
        self.assertIn("Be",self.currentOptions('mask'))
        self.assertIn("Mg",self.currentOptions('mask'))
        self.assertIn("Ca",self.currentOptions('mask'))
        self.assertIn("Nb",self.currentOptions('mask'))
        self.assertIn("Ta",self.currentOptions('mask'))
        self.assertIsInstance(self.currentOptions('reference'),int)
        self.assertIsInstance(self.currentOptions('symmetry'),bool)
        self.assertIsInstance(self.currentOptions('redundant'),bool)
        self.assertIsInstance(self.currentOptions('refined'),bool)

if __name__ == '__main__':
    unittest.main()
